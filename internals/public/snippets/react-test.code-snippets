{
  "setup": {
    "scope": "typescriptreact",
    "prefix": "setup",
    "body": [
      "import userEvent from '@testing-library/user-event'",
      "",
      "import { faker } from '@faker-js/faker'",
      "import { render, RenderResult } from '@testing-library/react'",
      "",
      "$0",
    ],
  },
  "sut": {
    "scope": "typescriptreact",
    "prefix": [
      "sut",
      "makeSut"
    ],
    "body": [
      "interface Sut {",
      "  sut: RenderResult",
      "  ${2:component}: HTMLElement",
      "}",
      "",
      "const makeSut = (props: ${1:Component}Props): Sut => {",
      "  const sut = render(<${1:Component} {...props} />)",
      "  const $2 = sut.getByTestId('$2')",
      "  return {",
      "    sut,",
      "    $2",
      "  }",
      "}",
      "",
      "$0",
    ],
  },
  "sutWithRouter": {
    "scope": "typescriptreact",
    "prefix": [
      "sutr",
      "sutRouter",
      "renderWithRouter"
    ],
    "body": [
      "import { renderWithRouter, RenderWithRouterResult } from '@/tests/presentation/mocks/mock-render'",
      "",
      "interface Sut {",
      "  sut: RenderWithRouterResult",
      "  ${2:component}: HTMLElement",
      "}",
      "",
      "const makeSut = (props: ${1:Component}Props): Sut => {",
      "  const sut = renderWithRouter(<${1:Component} {...props} />)",
      "  const $2 = sut.getByTestId('$2')",
      "  return {",
      "    sut,",
      "    $2",
      "  }",
      "}",
      "",
      "$0",
    ],
  },
  "mockProperties": {
    "scope": "typescriptreact",
    "prefix": [
      "mp",
      "mockProperties"
    ],
    "body": [
      "const mockProps = (): ${1:Component}Props => ({",
      "  $0",
      "})",
      "",
    ],
  },
  "mockComponent": {
    "scope": "typescriptreact",
    "prefix": [
      "mc",
      "mockComponent"
    ],
    "body": [
      "interface TestComponentProps {",
      "  ",
      "}",
      "",
      "function TestComponent (props: TestComponentProps): React.JSX.Element {",
      "  const { $1, $3 } = use${4:Context}(${5:props})",
      "  return (",
      "    <button data-testid=\"$1Button\" onClick={() => $3() }>",
      "      <p>{String($1${2:?.})}</p>",
      "    </button>",
      "  )",
      "}",
      "",
      "$0",
    ],
  },
  "mockHooks": {
    "scope": "typescriptreact",
    "prefix": [
      "mh",
      "mockHooks"
    ],
    "body": [
      "beforeAll(() => {",
      "  vi.mock('@/presentation/hooks', () => ({",
      "    use$1: vi.fn(() => ({",
      "      $0",
      "    }))",
      "  }))",
      "})",
      "",
    ],
  },
  "mockReact": {
    "scope": "typescriptreact",
    "prefix": [
      "mr",
      "mockReact"
    ],
    "body": [
      "beforeAll(() => {",
      "  vi.mock('react${1:-router-dom}', async () => {",
      "    const router = await vi.importActual<any>('react${1:-router-dom}')",
      "    return {",
      "      ...router,",
      "      use$2: vi.fn(() => ({$0}))",
      "    }",
      "  })",
      "})",
      "",
    ],
  },
  "mockReturnValue": {
    "scope": "typescriptreact",
    "prefix": [
      "mrv",
      "mockReturnValue"
    ],
    "body": [
      "const $3 = $0",
      ";($1 as Mock).mockReturnValue${2:Once}({",
      "  $3",
      "})",
    ],
  },
  "mockReturnValueWithFunction": {
    "scope": "typescriptreact",
    "prefix": [
      "mrvf",
      "mockReturnValueWithFunction"
    ],
    "body": [
      "const $3 = vi.fn($0)",
      ";($1 as Mock).mockReturnValue${2:Once}({",
      "  $3",
      "})",
    ],
  },
  "mockFunction": {
    "scope": "typescript",
    "prefix": [
      "mf",
      "mockFunction"
    ],
    "body": [
      "export const mock$1 = (): $1$0 => ({",
      "})"
    ],
  },
  "test": {
    "scope": "typescriptreact",
    "prefix": [
      "test",
      "describe"
    ],
    "body": [
      "describe('$1', () => {",
      "  it('should be rendered on DOM', async () => {",
      "    ${4:const props = mockProps()}",
      "    const { ${2:component} } = makeSut(${3:props})",
      "",
      "    expect($2).toBeInTheDocument()",
      "  })",
      "})",
      "",
    ],
  },
  "it": {
    "scope": "typescriptreact",
    "prefix": "it",
    "body": [
      "it('should $1', async () => {",
      "  ${3:const props = mockProps()}",
      "  const { sut } = makeSut(${2:props})",
      "",
      "  const ${4:component} = sut.getByTestId('$4')",
      "",
      "  expect($4).to$0()",
      "})",
    ],
  },
  "testSubmit": {
    "scope": "typescriptreact",
    "prefix": [
      "submit",
      "testSubmit"
    ],
    "body": [
      "it('should call request on submit', async () => {",
      "  const requestSpy = vi.fn()",
      "  ;(useRequest as Mock).mockReturnValueOnce({",
      "    data: undefined,",
      "    request: requestSpy",
      "  })",
      "  const { sut } = makeSut()",
      "",
      "  const form = sut.getByTestId('$0-form')",
      "  fireEvent.submit(form)",
      "  ",
      "  expect(requestSpy).toHaveBeenCalledTimes(1)",
      "})",
    ],
  },
}